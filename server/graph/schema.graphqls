# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
  id: String!
  username: String!
  first_name: String!
  last_name: String!
  email: String!
  phone_number: String!
  password: String!
  business_address: String!
  billing_address: String!
  website: String!
  job_title: String!
  groups: [Group!]!
  vreel: Vreel!
}
# Create Group - name, location, meet times?, public/private?
type Group {
  id: String!
  author: String!
  name: String!
  location: String!
  meet_times: [String!]
  private: Boolean!
  parent_group: String!
  child_groups: [Group!]
  members: [String!]
  events: [Event!]
  vreel: Vreel!
}
type Event {
  ID: String!
  author: String!
  name: String!
  thumbnail: String!
  start_time: String!
  end_time: String!
  description: String!
  location: String!
  group_id: String!
  repeat: String!
  link: String!
  groups: [String!]
}
type SlideMetaData {
  created: String!
  size: String!
}
type Slide {
  id: String!
  content_type: String!
  uri: String!
  slide_location: Int!
  metadata: SlideMetaData!
}

type Contact {
  position: Int!
  header: String!
}

type Service {
  position: Int!
  header: String!
  info: TextArea!
}

type Link {
  position: Int
  header: String!
  url: String!
  link_type: String!
  category: String!
}

type Links {
  position: Int
  links: [Link]
}

type TextArea {
  content: String!
}

type Videos {
  position: Int!
  uri: String!
  tag: String!
}

type Gallery {
  position: Int
  uris: [String!]
  tag: String!
}

type VreelElements {
  text_area: TextArea
  videos: Videos
  gallery: Gallery
  services: Service
  links: Links
  contact: Contact
}
type Vreel {
  author: String!
  page_title: String!
  button_uri: String
  slides: [Slide]!
  elements: VreelElements!
}

type MutationResponse {
  succeeded: Boolean!
  message: String!
}
type LocalSession {
  token: String!
}
type ResolvedPasswordReset {
  message: String!
  succeeded: Boolean!
}
type ResetPasswordResponse {
  message: String!
  email_exists: Boolean!
  reset_token: String!
}

type Query {
  user(id: String): User!
  username(username: String): User!
  login(input: LoginInput): LocalSession!
  group(id: String!, token: String!): Group!
}

input NewEvent {
  name: String!
  thumbnail: String!
  start_time: String!
  end_time: String!
  description: String!
  location: String!
  group_id: String!
  repeat: String!
  link: String!
  groups: [String!]
}

input NewUser {
  username: String!
  first_name: String
  last_name: String
  email: String!
  phone_number: String
  password: String!
  business_address: String
  billing_address: String
  website: String
  job_title: String
}

input ResetPasswordInput {
  email: String!
}

input LoginInput {
  email: String!
  password: String!
}

input NewGroup {
  token: String!
  name: String!
  location: String!
  meet_times: [String!]
  private: Boolean!
  parent_group: String!
}

input NewSlide {
  content_type: String!
  uri: String!
  slide_location: Int!
}

type Mutation {
  register(input: NewUser!): User!
  createEvent(token: String!, input: NewEvent!): Event!
  createResetPasswordRequestIntent(email: String!): ResetPasswordResponse!
  resolveResetPasswordRequestIntent(
    token: String!
    password: String!
  ): ResolvedPasswordReset!
  createGroup(input: NewGroup): Group!
  deleteGroup(id: String!, token: String!): MutationResponse!
  addUserToGroup(
    token: String!
    groupId: String!
    userId: String!
  ): MutationResponse!
  removeUserFromGroup(
    token: String!
    groupId: String!
    member: String!
  ): MutationResponse!
}
